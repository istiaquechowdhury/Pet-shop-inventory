// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetShopInventory.ApplicationDbContext;

#nullable disable

namespace PetShopInventory.Migrations
{
    [DbContext(typeof(PetShopInventoryContext))]
    [Migration("20231228104343_addedPetIdColumninInSalesRecordsTable")]
    partial class addedPetIdColumninInSalesRecordsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PetShopInventory.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PassWord = "123456",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("PetShopInventory.Models.Aquarium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aquariums");
                });

            modelBuilder.Entity("PetShopInventory.Models.Cage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("PetShopInventory.Models.FeedingSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ScheduleDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("feedingSchedules");
                });

            modelBuilder.Entity("PetShopInventory.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AquariumId")
                        .HasColumnType("int");

                    b.Property<int?>("CageId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AquariumId");

                    b.HasIndex("CageId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetShopInventory.Models.PetFeedingSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AquariumId")
                        .HasColumnType("int");

                    b.Property<int?>("CageId")
                        .HasColumnType("int");

                    b.Property<int>("FeedingScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AquariumId");

                    b.HasIndex("CageId");

                    b.HasIndex("FeedingScheduleId");

                    b.HasIndex("PetId");

                    b.ToTable("PetFeedingSchedules");
                });

            modelBuilder.Entity("PetShopInventory.Models.PurchaseInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("SellerContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfPet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("PetPurchaseInformations");
                });

            modelBuilder.Entity("PetShopInventory.Models.SalesRecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("SellDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("SalesRecords");
                });

            modelBuilder.Entity("PetShopInventory.Models.Pet", b =>
                {
                    b.HasOne("PetShopInventory.Models.Aquarium", "Aquarium")
                        .WithMany("Pets")
                        .HasForeignKey("AquariumId");

                    b.HasOne("PetShopInventory.Models.Cage", "Cage")
                        .WithMany("Pets")
                        .HasForeignKey("CageId");

                    b.Navigation("Aquarium");

                    b.Navigation("Cage");
                });

            modelBuilder.Entity("PetShopInventory.Models.PetFeedingSchedule", b =>
                {
                    b.HasOne("PetShopInventory.Models.Aquarium", "Aquarium")
                        .WithMany()
                        .HasForeignKey("AquariumId");

                    b.HasOne("PetShopInventory.Models.Cage", "Cage")
                        .WithMany()
                        .HasForeignKey("CageId");

                    b.HasOne("PetShopInventory.Models.FeedingSchedule", "FeedingSchedule")
                        .WithMany("PetFeedingSchedules")
                        .HasForeignKey("FeedingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetShopInventory.Models.Pet", "Pet")
                        .WithMany("PetFeedingSchedules")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aquarium");

                    b.Navigation("Cage");

                    b.Navigation("FeedingSchedule");

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetShopInventory.Models.PurchaseInformation", b =>
                {
                    b.HasOne("PetShopInventory.Models.Pet", "Pet")
                        .WithMany("PurchaseInformation")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetShopInventory.Models.SalesRecords", b =>
                {
                    b.HasOne("PetShopInventory.Models.Pet", "Pet")
                        .WithMany("SalesRecords")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("PetShopInventory.Models.Aquarium", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetShopInventory.Models.Cage", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetShopInventory.Models.FeedingSchedule", b =>
                {
                    b.Navigation("PetFeedingSchedules");
                });

            modelBuilder.Entity("PetShopInventory.Models.Pet", b =>
                {
                    b.Navigation("PetFeedingSchedules");

                    b.Navigation("PurchaseInformation");

                    b.Navigation("SalesRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
